from .settings import settings
from .telegram import TelegramNotifier
import tarfile
from datetime import datetime
import os
from pathlib import Path
import fnmatch
from rich.console import Console
import logging
import time
import signal

class BackupManager:
    def __init__(self):
        self.settings = settings
        self.logger = logging.getLogger(__name__)
        self.telegram = TelegramNotifier(settings.telegram_token, settings.chat_id)
        self.console = Console()
        self.start_time = None
        self.end_time = None
        self.file_count = 0
        self.running = True
        signal.signal(signal.SIGINT, self.handle_shutdown)
        signal.signal(signal.SIGTERM, self.handle_shutdown)

    def handle_shutdown(self, signum, frame):
        self.running = False
        self.console.print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ç–∫–∞–ø–∞...", style="yellow")
        
    def create_backup(self):
        self.start_time = datetime.now()
        self.logger.info(f"–ù–∞—á–∞–ª–æ –±—ç–∫–∞–ø–∞: {self.start_time}")
        
        if not self.settings.backup_source:
            self.logger.error("–ù–µ —É–∫–∞–∑–∞–Ω BACKUP_SOURCE –≤ .env —Ñ–∞–π–ª–µ")
            self.console.print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ .env —Ñ–∞–π–ª–µ", style="red")
            return None
        
        self.settings.backup_dir.mkdir(parents=True, exist_ok=True)
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        backup_file = self.settings.backup_dir / f"backup_{timestamp}.tar.gz"
        
        try:
            self.console.print(f"üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∏–∑: {self.settings.backup_source}", style="yellow")
            with tarfile.open(backup_file, "w:gz") as tar:
                for root, dirs, files in os.walk(self.settings.backup_source):
                    if not self.running:
                        raise InterruptedError("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    
                    for file in files:
                        file_path = os.path.join(root, file)
                        if not any(fnmatch.fnmatch(file_path, pattern) for pattern in self.settings.exclude_dirs):
                            try:
                                tar.add(file_path)
                                self.file_count += 1
                                if self.file_count % 100 == 0:
                                    self.console.print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.file_count}", style="blue")
                            except Exception as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
            
            return backup_file
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}", style="red")
            return None

    def _get_file_size(self, file_path):
        size_bytes = os.path.getsize(file_path)
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024:
                return f"{size_bytes:.2f}{unit}"
            size_bytes /= 1024
        return f"{size_bytes:.2f}TB"

    def cleanup_old_backups(self):
        try:
            backups = sorted(
                self.settings.backup_dir.glob("backup_*.tar.gz"),
                key=lambda x: x.stat().st_mtime,
                reverse=True
            )[self.settings.keep_backups:]
            
            for backup in backups:
                backup.unlink()
                self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup.name}")
                self.console.print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup.name}", style="yellow")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

    def start_scheduled_backup(self):
        self.running = True
        try:
            while self.running:
                self.run()
                if self.running:
                    self.console.print(f"–°–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ {self.settings.backup_interval} —á–∞—Å–æ–≤", style="blue")
                    for _ in range(self.settings.backup_interval):
                        if not self.running:
                            break
                        time.sleep(3600)
        except KeyboardInterrupt:
            self.running = False
            self.console.print("\n–ê–≤—Ç–æ–±—ç–∫–∞–ø –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="yellow")

    def run(self):
        try:
            self.console.print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ç–∫–∞–ø–∞...", style="blue")
            backup_file = self.create_backup()
            
            if backup_file:
                report = (
                    f"üìù –§–∞–π–ª: {backup_file.name}\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {self._get_file_size(backup_file)}\n"
                    f"üìë –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.file_count}"
                )
                
                self.console.print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...", style="blue")
                self.telegram.send_file(backup_file, caption=report)
                self.cleanup_old_backups()
                self.console.print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±—ç–∫–∞–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", style="green")
            else:
                self.console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", style="red")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}", style="red")
