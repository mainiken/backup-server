from .settings import settings
from .utils import setup_logger, TelegramNotifier
import tarfile
from datetime import datetime
import os
from pathlib import Path
import fnmatch
from rich.console import Console

class BackupManager:
    def __init__(self):
        self.settings = settings
        self.logger = setup_logger()
        self.telegram = TelegramNotifier(settings.telegram_token, settings.chat_id)
        self.console = Console()
        self.start_time = None
        self.end_time = None
        self.file_count = 0
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        self.default_excludes = [
            '*venv*',
            '*virtualenv*',
            '*.pyc',
            '__pycache__',
            '.git',
            'node_modules',
            '.env',
            '*.log',
            '*.tmp',
            '*.temp',
            '.idea',
            '.vscode',
            '*.swp',
            '*.swo',
            '.DS_Store',
            'Thumbs.db'
        ]

    def should_exclude(self, path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø—É—Ç—å –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞"""
        path_str = str(path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        for pattern in self.default_excludes:
            if fnmatch.fnmatch(path_str, pattern) or \
               any(fnmatch.fnmatch(part, pattern) for part in Path(path_str).parts):
                return True
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if hasattr(self.settings, 'additional_excludes'):
            for pattern in self.settings.additional_excludes:
                if fnmatch.fnmatch(path_str, pattern) or \
                   any(fnmatch.fnmatch(part, pattern) for part in Path(path_str).parts):
                    return True
                    
        return False

    def _get_file_size(self, file_path):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        size_bytes = os.path.getsize(file_path)
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024:
                return f"{size_bytes:.2f}{unit}"
            size_bytes /= 1024
        return f"{size_bytes:.2f}TB"

    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        self.start_time = datetime.now()
        self.logger.info(f"–ù–∞—á–∞–ª–æ –±—ç–∫–∞–ø–∞: {self.start_time}")
        
        if not self.settings.backup_source:
            self.logger.error("–ù–µ —É–∫–∞–∑–∞–Ω BACKUP_SOURCE –≤ .env —Ñ–∞–π–ª–µ")
            self.console.print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ .env —Ñ–∞–π–ª–µ", style="red")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.settings.backup_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        backup_file = self.settings.backup_dir / f"backup_{timestamp}.tar.gz"
        
        try:
            self.console.print(f"üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∏–∑: {self.settings.backup_source}", style="yellow")
            with tarfile.open(backup_file, "w:gz") as tar:
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –ø—Ä–æ–ø—É—Å–∫–∞—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                for root, dirs, files in os.walk(self.settings.backup_source):
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    dirs[:] = [d for d in dirs if not self.should_exclude(os.path.join(root, d))]
                    
                    for file in files:
                        file_path = os.path.join(root, file)
                        if not self.should_exclude(file_path):
                            try:
                                tar.add(file_path, 
                                      arcname=os.path.relpath(file_path, 
                                                            str(self.settings.backup_source)))
                                self.file_count += 1
                                if self.file_count % 100 == 0:
                                    self.console.print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.file_count}", 
                                                     style="blue")
                            except Exception as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
                
            self.end_time = datetime.now()
            duration = self.end_time - self.start_time
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = (
                f"üì¶ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω\n"
                f"üìù –§–∞–π–ª: {backup_file.name}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {self._get_file_size(backup_file)}\n"
                f"üïí –ù–∞—á–∞–ª–æ: {self.start_time}\n"
                f"üïï –û–∫–æ–Ω—á–∞–Ω–∏–µ: {self.end_time}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
                f"üìë –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.file_count}"
            )
            
            self.logger.info(report)
            self.console.print(report, style="green")
            return backup_file
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}", style="red")
            return None

    def cleanup_old_backups(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —à—Ç—É–∫"""
        try:
            backups = sorted(
                self.settings.backup_dir.glob("backup_*.tar.gz"),
                key=lambda x: x.stat().st_mtime,
                reverse=True
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            for backup in backups[self.settings.keep_backups:]:
                backup.unlink()
                self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup.name}")
                self.console.print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup.name}", style="yellow")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"""
        try:
            self.console.print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—ç–∫–∞–ø–∞...", style="blue")
            backup_file = self.create_backup()
            
            if backup_file:
                self.console.print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram...", style="blue")
                self.telegram.send_file(backup_file)
                self.cleanup_old_backups()
                self.console.print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±—ç–∫–∞–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", style="green")
            else:
                self.console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", style="red")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {
